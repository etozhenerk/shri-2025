---
description: "Паттерны React-компонентов: явная типизация children, уникальные keys, декомпозиция и хуки"
globs: "*.tsx"
alwaysApply: true
---
# Паттерны React-компонентов

## Обязательные стандарты (MUST)

- **Явное указание `children`**: **MUST** всегда явно типизировать пропс `children` с помощью `React.ReactNode`, если компонент должен принимать дочерние элементы. Нельзя полагаться на неявный `children`.

- **Использование `key` в списках**: **MUST** предоставлять уникальный и стабильный `key` для каждого элемента при рендеринге списков. Использование индекса массива в качестве ключа (`key={index}`) запрещено, так как это может привести к проблемам с производительностью и состоянием компонентов.

## Рекомендации (SHOULD)

- **Декомпозиция компонентов**: **SHOULD** разделять большие компоненты на более мелкие и сфокусированные. Это улучшает читаемость, переиспользование и упрощает тестирование.

- **Использование хуков для логики**: **SHOULD** выносить сложную логику состояния и побочные эффекты в кастомные хуки (`use...`). Это помогает отделить логику от представления.

## Примеры

### Использование `key` в списках

```typescript
// ✅ Правильно
items.map((item) => (
  <Component key={item.id} {...item} />
));

// ❌ Неправильно
items.map((item, index) => (
  <Component key={index} {...item} />
));
```

### Явная типизация `children`

```typescript
// ✅ Правильно
import type { ReactNode } from 'react';

interface CardProps {
  title: string;
  children: ReactNode;
}

export const Card = ({ title, children }: CardProps) => {
  // ...
};
```
