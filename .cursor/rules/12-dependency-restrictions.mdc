---
description: "Ограничения на зависимости: только Vitest, согласованность со стеком, минимизация зависимостей"
globs: "package.json"
alwaysApply: false
---
# Ограничения на зависимости

## Обязательные стандарты (MUST)

- **Тестирование только с Vitest**: **MUST** использовать только Vitest для тестирования компонентов и функций. Запрещено добавлять зависимости, связанные с Jest (`jest`, `jest-*`, `@types/jest*` и т.д.).

- **Предпочтение существующим зависимостям**: **MUST** использовать уже установленные в проекте библиотеки, а не добавлять новые с аналогичной функциональностью. Если нужной функциональности нет, сначала проверить возможность расширения существующего кода.

- **Согласованность с основными инструментами**: **MUST** использовать инструменты, совместимые с основным стеком (React, TypeScript, Vitest, Playwright). Запрещено добавлять инструменты, конфликтующие с существующим стеком.

## Рекомендации (SHOULD)

- **Минимизация зависимостей**: **SHOULD** минимизировать количество внешних зависимостей, особенно если функциональность можно реализовать с помощью стандартных или уже установленных инструментов.

- **Проверка размера зависимостей**: **SHOULD** оценивать размер добавляемых зависимостей и их влияние на размер итогового бандла.

## Примеры

```typescript
// ❌ Неправильно: использование Jest
import { render } from '@testing-library/react';
import { jest } from '@jest/globals';
import { axe, toHaveNoViolations } from 'jest-axe';

// ✅ Правильно: использование Vitest
import { render } from '@testing-library/react';
import { describe, it, expect, vi } from 'vitest';
import { axe } from 'axe-core';
```

При необходимости реализации дополнительной функциональности:

```typescript
// ❌ Неправильно: добавление новой библиотеки для реализации простой функциональности
import deepEqual from 'deep-equal';

// ✅ Правильно: использование встроенных средств
expect(object1).toEqual(object2);
```
