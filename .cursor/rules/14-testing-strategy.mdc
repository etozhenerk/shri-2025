---
description: 
globs: 
alwaysApply: true
---
# Стратегия тестирования: выбор типа тестов

## Обязательные стандарты (MUST)

- **Стратегия выбора типа тестов**: **MUST** следовать принципу: используйте E2E-тесты только для проверки **самых критичных, сквозных путей пользователя**, которые невозможно проверить на более низком уровне. Главный вопрос: *"Проверяет ли этот тест что-то, что можно проверить ТОЛЬКО запустив реальный браузер?"*

- **Documentation-first процесс**: **MUST** следовать процессу документирования тестов:
  1. Создать сценарий в `docs/tests/scenarios/` 
  2. Создать тест-кейс в `docs/tests/test-cases/`
  3. Написать код теста с соответствующим ID

- **Формат ID тест-кейсов**: **MUST** использовать формат `TC-[PREFIX]-[NNN]`, где `PREFIX` — код страницы (`HP`, `GP`, `HY`, `A11Y`), а `NNN` — номер (например, `TC-HP-001`).

- **Именование шагов в тестах**: **MUST** использовать формат `test.step('Шаг [Номер]: [Название из тест-кейса]', ...)`. Текст должен **полностью** соответствовать шагу в тест-кейсе.

- **Обязательные проверки**: **MUST** включать как минимум одну проверку (`expect`) в каждый `test.step`.

## Рекомендации (SHOULD)

- **Преобразование E2E в интеграционные**: **SHOULD** преобразовывать E2E-тесты в интеграционные, если они проверяют:
  - Логику валидации форм
  - Взаимодействие компонентов со стором
  - Отображение данных после API-запросов
  - Открытие модальных окон

- **Сохранение E2E для**: **SHOULD** оставлять E2E-тесты для:
  - Полных сквозных сценариев (логин → переход → действие → выход)
  - Визуальных проверок (скриншот-тесты)
  - Критичных пользовательских путей

## Примеры

### Выбор типа теста

```typescript
// ✅ Интеграционный тест: проверка логики компонентов
test('Отображение результатов анализа после загрузки файла', () => {
  // Arrange
  const mockApiResponse = { highlights: [...] };
  
  // Act
  render(<HomePage />);
  fireEvent.change(fileInput, { target: { files: [file] } });
  
  // Assert
  expect(screen.getByText('Результаты анализа')).toBeInTheDocument();
});

// ✅ E2E-тест: полный сквозной сценарий
test('TC-HP-001: Полный цикл анализа файла', async ({ pages, actions }) => {
  await test.step('Шаг 1: Загрузка файла', async () => {
    await actions.home.uploadFile('test-data.csv');
    await expect(pages.homePage.getFileName()).toBeVisible();
  });
});
```

### Именование шагов

```typescript
// ✅ Правильно: точно соответствует тест-кейсу
test.step('Шаг 1: Нажатие на кнопку генерации и проверка состояния загрузки', async () => {
  await actions.generate.clickGenerateButton();
  
  await expect(pages.generatePage.getLoadingState()).toBeVisible();
});

// ❌ Неправильно: не соответствует тест-кейсу
test.step('Клик по кнопке', async () => {
  // ...
});
```

## Сравнительная таблица

| Критерий | E2E-тесты | Интеграционные тесты |
|----------|-----------|---------------------|
| **Скорость** | Медленно (секунды) | Быстро (миллисекунды) |
| **Надежность** | Низкая (flaky) | Высокая (стабильные) |
| **Уверенность** | Максимальная | Высокая |
| **Стоимость** | Высокая | Низкая |
| **Область применения** | Сквозные сценарии | Логика компонентов |
